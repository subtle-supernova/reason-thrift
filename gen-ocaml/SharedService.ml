(*
 Autogenerated by Thrift Compiler (0.13.0)

 DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
*)

open Thrift
open Shared_types

(* HELPER FUNCTIONS AND STRUCTURES *)

class getStruct_args =
object (self)
  val mutable _key : Int32.t option = None
  method get_key = _key
  method grab_key = match _key with None->raise (Field_empty "getStruct_args.key") | Some _x8 -> _x8
  method set_key _x8 = _key <- Some _x8
  method unset_key = _key <- None
  method reset_key = _key <- None

  method copy =
      let _new = Oo.copy self in
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getStruct_args";
    (match _key with None -> () | Some _v -> 
      oprot#writeFieldBegin("key",Protocol.T_I32,1);
      oprot#writeI32(_v);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getStruct_args (iprot : Protocol.t) =
  let _str11 = new getStruct_args in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t12,_id13) = iprot#readFieldBegin in
        if _t12 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id13 with 
          | 1 -> (if _t12 = Protocol.T_I32 then
              _str11#set_key iprot#readI32
            else
              iprot#skip _t12)
          | _ -> iprot#skip _t12);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str11

class getStruct_result =
object (self)
  val mutable _success : sharedStruct option = None
  method get_success = _success
  method grab_success = match _success with None->raise (Field_empty "getStruct_result.success") | Some _x14 -> _x14
  method set_success _x14 = _success <- Some _x14
  method unset_success = _success <- None
  method reset_success = _success <- None

  method copy =
      let _new = Oo.copy self in
      if _success <> None then
        _new#set_success self#grab_success#copy;
    _new
  method write (oprot : Protocol.t) =
    oprot#writeStructBegin "getStruct_result";
    (match _success with None -> () | Some _v -> 
      oprot#writeFieldBegin("success",Protocol.T_STRUCT,0);
      _v#write(oprot);
      oprot#writeFieldEnd
    );
    oprot#writeFieldStop;
    oprot#writeStructEnd
end
let rec read_getStruct_result (iprot : Protocol.t) =
  let _str17 = new getStruct_result in
    ignore(iprot#readStructBegin);
    (try while true do
        let (_,_t18,_id19) = iprot#readFieldBegin in
        if _t18 = Protocol.T_STOP then
          raise Break
        else ();
        (match _id19 with 
          | 0 -> (if _t18 = Protocol.T_STRUCT then
              _str17#set_success (read_sharedStruct iprot)
            else
              iprot#skip _t18)
          | _ -> iprot#skip _t18);
        iprot#readFieldEnd;
      done; ()
    with Break -> ());
    iprot#readStructEnd;
    _str17

class virtual iface =
object (self)
  method virtual getStruct : Int32.t option -> sharedStruct
end

class client (iprot : Protocol.t) (oprot : Protocol.t) =
object (self)
  val mutable seqid = 0
  method getStruct key = 
    self#send_getStruct key;
    self#recv_getStruct
  method private send_getStruct key = 
    oprot#writeMessageBegin ("getStruct", Protocol.CALL, seqid);
    let args = new getStruct_args in
      args#set_key key;
      args#write oprot;
      oprot#writeMessageEnd;
      oprot#getTransport#flush
  method private recv_getStruct  =
    let (fname, mtype, rseqid) = iprot#readMessageBegin in
      (if mtype = Protocol.EXCEPTION then
        let x = Application_Exn.read iprot in
          (iprot#readMessageEnd;           raise (Application_Exn.E x))
      else ());
      let result = read_getStruct_result iprot in
        iprot#readMessageEnd;
        match result#get_success with Some v -> v | None -> (
          raise (Application_Exn.E (Application_Exn.create Application_Exn.MISSING_RESULT "getStruct failed: unknown result")))
end

class processor (handler : iface) =
object (self)
  inherit Processor.t

  val processMap = Hashtbl.create 1
  method process iprot oprot =
    let (name, typ, seqid)  = iprot#readMessageBegin in
      if Hashtbl.mem processMap name then
        (Hashtbl.find processMap name) (seqid, iprot, oprot)
      else (
        iprot#skip(Protocol.T_STRUCT);
        iprot#readMessageEnd;
        let x = Application_Exn.create Application_Exn.UNKNOWN_METHOD ("Unknown function "^name) in
          oprot#writeMessageBegin(name, Protocol.EXCEPTION, seqid);
          x#write oprot;
          oprot#writeMessageEnd;
          oprot#getTransport#flush
      );
      true
  method private process_getStruct (seqid, iprot, oprot) =
    let args = read_getStruct_args iprot in
      iprot#readMessageEnd;
      let result = new getStruct_result in
        result#set_success (handler#getStruct args#get_key);
        oprot#writeMessageBegin ("getStruct", Protocol.REPLY, seqid);
        result#write oprot;
        oprot#writeMessageEnd;
        oprot#getTransport#flush
  initializer
    Hashtbl.add processMap "getStruct" self#process_getStruct;
end

